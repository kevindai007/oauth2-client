spring:
  application:
    name: oauth2-server
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${DB_HOST}:5432/oauth2_server?useSSL=false
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: true
  main:
    allow-circular-references: true
  security:
    oauth2:
      client:
        registration:
          github:
            clientId: ${github_client_id}
            clientSecret: ${github_client_secret}
          google:
            client-id: ${google_client_id}
            client-secret: ${google_client_secret}
#        provider:
##          If you're using GitHub as the provider, Spring Boot already knows these URLs. So you actually don’t need to specify them
#          github:
##            This is the URL your app redirects the user to when starting the login process
##            GitHub shows the login page and asks for user consent.
##            After successful login, GitHub redirects the user back to your app with an authorization code
#            authorization-uri: https://github.com/login/oauth/authorize
##            After your app gets the authorization code from GitHub, it exchanges it at this endpoint for an access token
#            token-uri: https://github.com/login/oauth/access_token
##            After receiving the access token, Spring Security uses this endpoint to fetch the user’s profile from GitHub
#            user-info-uri: https://api.github.com/user
# ...
server:
  port: 8080

